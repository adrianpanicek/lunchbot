service: alias-app
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  memorySize: 512
  environment:
    TOKEN_SECRET: mysecret # Only for the dev environment
    TOKEN_EXPIRATION: 7d
    TABLE_ALIASES: ${self:provider.stage}-aliases
    TABLE_USERS: ${self:provider.stage}-users-2
    TABLE_REFRESH_TOKENS: ${self:provider.stage}-refresh-tokens
    TABLE_STASHES: ${self:provider.stage}-stashes
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [ Aliases, Arn ]
      - "Fn::GetAtt": [ Users, Arn ]
      - "Fn::GetAtt": [ RefreshTokens, Arn ]
      - "Fn::GetAtt": [ Stashes, Arn ]

app: alias
tenant: adrianpanicek

plugins:
  - serverless-webpack
  - serverless-domain-manager

functions:
  login:
    handler: src/user/login.handle
    events:
    - http:
        path: login
        method: post
  refresh_token:
    handler: src/user/refresh_token.handle
    events:
    - http:
        path: refreshToken
        method: post
  register:
    handler: src/user/register.register
    events:
    - http:
        path: register
        method: post

  update_stash:
    handler: src/stash/update_stash.handle
    events:
    - http:
        path: user/stash
        method: put
        authorizer: authorizer
  get_stash:
    handler: src/stash/get_stash.handle
    events:
    - http:
        path: user/stash
        method: get
        authorizer: authorizer

  authorizer:
    handler: src/authorize.handle

  get_alias:
    handler: src/alias/get_alias.handle
    events:
      - http:
          path: aliases/{aliasID}
          method: get
          authorizer: authorizer
          request:
            parameters:
              paths:
                aliasID: true
  create_alias:
    handler: src/alias/create_alias.handle
    events:
    - http:
        path: aliases
        method: post
        authorizer: authorizer
  add_access_token:
    handler: src/alias/create_access_token.handle
    events:
      - http:
          path: /aliases/{aliasID}/accessTokens
          method: POST
          request:
            parameters:
              paths:
                aliasID: true

custom:
  customDomain:
    domainName: alias.panicek.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  tableLimits:
    dev:
      read: 1
      write: 1

resources:
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}